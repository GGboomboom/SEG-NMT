{'baseline_xy': '/root/disk/scratch/model-tmnmt/baseline_fren.npz',
 'baseline_yx': '/root/disk/scratch/model-tmnmt/baseline_enfr.bs64.npz',
 'batch_size': 32,
 'beamsize': 5,
 'build_gate': True,
 'clip_c': 1.0,
 'd_maxlen': 200,
 'datasets': ['/root/workspace/TMNMT/.dataset/tm2.fren/train.fr.top5.shuf.tok',
              '/root/workspace/TMNMT/.dataset/tm2.fren/train.en.top5.shuf.tok',
              '/root/workspace/TMNMT/.dataset/tm2.fren/train.fr.top5.matched.shuf.tok',
              '/root/workspace/TMNMT/.dataset/tm2.fren/train.en.top5.matched.shuf.tok'],
 'decay_c': 0.0,
 'decoder': 'gru_cond',
 'diagonal': True,
 'dictionaries': ['/root/workspace/TMNMT/.dataset/tm2.fren/train.fr.top5.shuf.tok.pkl',
                  '/root/workspace/TMNMT/.dataset/tm2.fren/train.en.top5.shuf.tok.pkl',
                  '/root/workspace/TMNMT/.dataset/tm2.fren/train.fr.top5.shuf.tok.pkl',
                  '/root/workspace/TMNMT/.dataset/tm2.fren/train.en.top5.shuf.tok.pkl'],
 'dim': 1024,
 'dim_word': 512,
 'dispFreq': 10,
 'encoder': 'gru',
 'gate_lambda': 0.1,
 'gate_loss': False,
 'gru_coverage': True,
 'lrate': 0.0001,
 'maxlen': 50,
 'normalize': True,
 'only_train_g': False,
 'optimizer': 'adam',
 'overwrite': True,
 'patience': 1000,
 'reload_': True,
 'sampleFreq': 20,
 'saveFreq': 500,
 'saveto': '/root/disk/scratch/model-tmnmt/10_fren.ss.32-50.npz',
 'stochastic': False,
 'tm_source': '/root/workspace/TMNMT/.dataset/tm2.fren/devset.fr.matched.tok',
 'tm_target': '/root/workspace/TMNMT/.dataset/tm2.fren/devset.en.matched.tok',
 'trans_from': '/root/workspace/TMNMT/.dataset/tm2.fren/devset.fr.tok',
 'trans_ref': '/root/workspace/TMNMT/.dataset/tm2.fren/devset.en.tok',
 'trans_to': '/root/workspace/TMNMT/.translate/TM2.v6.translate',
 'use_coverage': True,
 'use_dropout': False,
 'use_pretrain': False,
 'validFreq': 250,
 'valid_batch_size': 32,
 'valid_datasets': ['/root/workspace/TMNMT/.dataset/tm2.fren/devset.fr.tok',
                    '/root/workspace/TMNMT/.dataset/tm2.fren/devset.en.tok',
                    '/root/workspace/TMNMT/.dataset/tm2.fren/devset.fr.matched.tok',
                    '/root/workspace/TMNMT/.dataset/tm2.fren/devset.en.matched.tok'],
 'voc_sizes': [20000, 20000, 20000, 20000]}
Building model: X -> Y & Y -> X model
Done.
load the pretrained NMT-models... load ... xy_Wemb
load ... xy_Wemb_dec
load ... xy_encoder_W
load ... xy_encoder_b
load ... xy_encoder_U
load ... xy_encoder_Wx
load ... xy_encoder_bx
load ... xy_encoder_Ux
load ... xy_encoder_r_W
load ... xy_encoder_r_b
load ... xy_encoder_r_U
load ... xy_encoder_r_Wx
load ... xy_encoder_r_bx
load ... xy_encoder_r_Ux
load ... xy_ff_state_W
load ... xy_ff_state_b
load ... xy_decoder_W
load ... xy_decoder_b
load ... xy_decoder_U
load ... xy_decoder_Wx
load ... xy_decoder_Ux
load ... xy_decoder_bx
load ... xy_decoder_U_nl
load ... xy_decoder_b_nl
load ... xy_decoder_Ux_nl
load ... xy_decoder_bx_nl
load ... xy_decoder_Wc
load ... xy_decoder_Wcx
load ... xy_decoder_W_comb_att
load ... xy_decoder_Wc_att
load ... xy_decoder_b_att
load ... xy_decoder_U_att
load ... xy_decoder_c_tt
load ... xy_ff_logit_lstm_W
load ... xy_ff_logit_lstm_b
load ... xy_ff_logit_prev_W
load ... xy_ff_logit_prev_b
load ... xy_ff_logit_ctx_W
load ... xy_ff_logit_ctx_b
load ... xy_ff_logit_W
load ... xy_ff_logit_b
Done.
Start a new model
build forward-attention models (2 models simultaneously)...
Build f_critic... Done
build mapping (bi-linear model)!
2
2
2
Building Mapping functions, ... Done.
build loss function (w/o gate)
build sampler (one-step)
Building f_init... Done
Building f_next... Done
build old sampler
Building f_init... Done
Building f_next... Done
build Cost Function... build Gradient (backward)... Done
Building Optimizers... Done
Build Networks... done!
build_networks: elapsed 389.4627 secs.
Loading data
[33m-------------------------------------------- Main-Loop -------------------------------------------------[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 50.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 50), (1, 1, 10), (32, 50, 10)]
Inputs strides: [(0, 50, 1), (0, 0, 1), (500, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (49, 1, 32, 2048), (49, 32, 1, 2048), (49, 32, 2048), (49, 32, 1024), (50, 32, 50, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 50), (1, 2), (32, 50, 1024), (32, 2048, 50), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1600, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (16000, 500, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(49), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(49), array(49), array(49), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(50), array([50, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1600, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1600), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 41.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 41), (1, 1, 10), (32, 41, 10)]
Inputs strides: [(0, 41, 1), (0, 0, 1), (410, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (41, 1, 32, 2048), (41, 32, 1, 2048), (41, 32, 2048), (41, 32, 1024), (42, 32, 41, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 41), (1, 2), (32, 41, 1024), (32, 2048, 41), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1312, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (13120, 410, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(41), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(41), array(41), array(41), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(41), array([41, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1312, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1312), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 43.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 43), (1, 1, 10), (32, 43, 10)]
Inputs strides: [(0, 43, 1), (0, 0, 1), (430, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (37, 1, 32, 2048), (37, 32, 1, 2048), (37, 32, 2048), (37, 32, 1024), (38, 32, 43, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 43), (1, 2), (32, 43, 1024), (32, 2048, 43), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1376, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (13760, 430, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(37), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(37), array(37), array(37), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(43), array([43, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1376, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1376), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 38.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 38), (1, 1, 10), (32, 38, 10)]
Inputs strides: [(0, 38, 1), (0, 0, 1), (380, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (34, 1, 32, 2048), (34, 32, 1, 2048), (34, 32, 2048), (34, 32, 1024), (35, 32, 38, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 38), (1, 2), (32, 38, 1024), (32, 2048, 38), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1216, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (12160, 380, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(34), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(34), array(34), array(34), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(38), array([38, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1216, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1216), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 33.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 33), (1, 1, 10), (32, 33, 10)]
Inputs strides: [(0, 33, 1), (0, 0, 1), (330, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (31, 1, 32, 2048), (31, 32, 1, 2048), (31, 32, 2048), (31, 32, 1024), (32, 32, 33, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 33), (1, 2), (32, 33, 1024), (32, 2048, 33), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1056, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (10560, 330, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(31), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(31), array(31), array(31), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(33), array([33, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1056, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1056), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 28.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 28), (1, 1, 10), (32, 28, 10)]
Inputs strides: [(0, 28, 1), (0, 0, 1), (280, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (27, 1, 32, 2048), (27, 32, 1, 2048), (27, 32, 2048), (27, 32, 1024), (28, 32, 28, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 28), (1, 2), (32, 28, 1024), (32, 2048, 28), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (896, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (8960, 280, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(27), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(27), array(27), array(27), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(28), array([28, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 896, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(896), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 28.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 28), (1, 1, 10), (32, 28, 10)]
Inputs strides: [(0, 28, 1), (0, 0, 1), (280, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (24, 1, 32, 2048), (24, 32, 1, 2048), (24, 32, 2048), (24, 32, 1024), (25, 32, 28, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 28), (1, 2), (32, 28, 1024), (32, 2048, 28), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (896, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (8960, 280, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(24), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(24), array(24), array(24), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(28), array([28, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 896, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(896), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 22.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 22), (1, 1, 10), (32, 22, 10)]
Inputs strides: [(0, 22, 1), (0, 0, 1), (220, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (21, 1, 32, 2048), (21, 32, 1, 2048), (21, 32, 2048), (21, 32, 1024), (22, 32, 22, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 22), (1, 2), (32, 22, 1024), (32, 2048, 22), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (704, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (7040, 220, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(21), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(21), array(21), array(21), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(22), array([22, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 704, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(704), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 22.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 22), (1, 1, 10), (32, 22, 10)]
Inputs strides: [(0, 22, 1), (0, 0, 1), (220, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (18, 1, 32, 2048), (18, 32, 1, 2048), (18, 32, 2048), (18, 32, 1024), (19, 32, 22, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 22), (1, 2), (32, 22, 1024), (32, 2048, 22), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (704, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (7040, 220, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(18), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(18), array(18), array(18), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(22), array([22, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 704, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(704), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 18.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 18), (1, 1, 10), (32, 18, 10)]
Inputs strides: [(0, 18, 1), (0, 0, 1), (180, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (16, 1, 32, 2048), (16, 32, 1, 2048), (16, 32, 2048), (16, 32, 1024), (17, 32, 18, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 18), (1, 2), (32, 18, 1024), (32, 2048, 18), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (576, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (5760, 180, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(16), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(16), array(16), array(16), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(18), array([18, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 576, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(576), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 15.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 15), (1, 1, 10), (32, 15, 10)]
Inputs strides: [(0, 15, 1), (0, 0, 1), (150, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (14, 1, 32, 2048), (14, 32, 1, 2048), (14, 32, 2048), (14, 32, 1024), (15, 32, 15, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 15), (1, 2), (32, 15, 1024), (32, 2048, 15), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (480, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (4800, 150, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(14), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(14), array(14), array(14), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(15), array([15, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 480, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(480), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 14.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 14), (1, 1, 10), (32, 14, 10)]
Inputs strides: [(0, 14, 1), (0, 0, 1), (140, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (12, 1, 32, 2048), (12, 32, 1, 2048), (12, 32, 2048), (12, 32, 1024), (13, 32, 14, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 14), (1, 2), (32, 14, 1024), (32, 2048, 14), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (448, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (4480, 140, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(12), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(12), array(12), array(12), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(14), array([14, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 448, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(448), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 11.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 11), (1, 1, 10), (32, 11, 10)]
Inputs strides: [(0, 11, 1), (0, 0, 1), (110, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (10, 1, 32, 2048), (10, 32, 1, 2048), (10, 32, 2048), (10, 32, 1024), (11, 32, 11, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 11), (1, 2), (32, 11, 1024), (32, 2048, 11), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (352, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (3520, 110, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(10), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(10), array(10), array(10), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(11), array([11, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 352, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(352), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 11.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 11), (1, 1, 10), (32, 11, 10)]
Inputs strides: [(0, 11, 1), (0, 0, 1), (110, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (9, 1, 32, 2048), (9, 32, 1, 2048), (9, 32, 2048), (9, 32, 1024), (10, 32, 11, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 11), (1, 2), (32, 11, 1024), (32, 2048, 11), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (352, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (3520, 110, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(9), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(9), array(9), array(9), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(11), array([11, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 352, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(352), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 11.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 11), (1, 1, 10), (32, 11, 10)]
Inputs strides: [(0, 11, 1), (0, 0, 1), (110, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (7, 1, 32, 2048), (7, 32, 1, 2048), (7, 32, 2048), (7, 32, 1024), (8, 32, 11, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 11), (1, 2), (32, 11, 1024), (32, 2048, 11), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (352, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (3520, 110, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(7), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(7), array(7), array(7), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(11), array([11, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 352, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(352), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 46.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 46), (1, 1, 10), (32, 46, 10)]
Inputs strides: [(0, 46, 1), (0, 0, 1), (460, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (51, 1, 32, 2048), (51, 32, 1, 2048), (51, 32, 2048), (51, 32, 1024), (52, 32, 46, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 46), (1, 2), (32, 46, 1024), (32, 2048, 46), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1472, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (14720, 460, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(51), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(51), array(51), array(51), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(46), array([46, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1472, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1472), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 44.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 44), (1, 1, 10), (32, 44, 10)]
Inputs strides: [(0, 44, 1), (0, 0, 1), (440, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (44, 1, 32, 2048), (44, 32, 1, 2048), (44, 32, 2048), (44, 32, 1024), (45, 32, 44, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 44), (1, 2), (32, 44, 1024), (32, 2048, 44), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1408, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (14080, 440, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(44), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(44), array(44), array(44), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(44), array([44, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1408, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1408), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 40.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 40), (1, 1, 10), (32, 40, 10)]
Inputs strides: [(0, 40, 1), (0, 0, 1), (400, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (38, 1, 32, 2048), (38, 32, 1, 2048), (38, 32, 2048), (38, 32, 1024), (39, 32, 40, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 40), (1, 2), (32, 40, 1024), (32, 2048, 40), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1280, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (12800, 400, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(38), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(38), array(38), array(38), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(40), array([40, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1280, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1280), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 38.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 38), (1, 1, 10), (32, 38, 10)]
Inputs strides: [(0, 38, 1), (0, 0, 1), (380, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (35, 1, 32, 2048), (35, 32, 1, 2048), (35, 32, 2048), (35, 32, 1024), (36, 32, 38, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 38), (1, 2), (32, 38, 1024), (32, 2048, 38), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1216, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (12160, 380, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(35), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(35), array(35), array(35), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(38), array([38, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1216, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1216), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 42.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 42), (1, 1, 10), (32, 42, 10)]
Inputs strides: [(0, 42, 1), (0, 0, 1), (420, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (31, 1, 32, 2048), (31, 32, 1, 2048), (31, 32, 2048), (31, 32, 1024), (32, 32, 42, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 42), (1, 2), (32, 42, 1024), (32, 2048, 42), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1344, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (13440, 420, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(31), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(31), array(31), array(31), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(42), array([42, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1344, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1344), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 34.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 34), (1, 1, 10), (32, 34, 10)]
Inputs strides: [(0, 34, 1), (0, 0, 1), (340, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (28, 1, 32, 2048), (28, 32, 1, 2048), (28, 32, 2048), (28, 32, 1024), (29, 32, 34, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 34), (1, 2), (32, 34, 1024), (32, 2048, 34), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1088, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (10880, 340, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(28), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(28), array(28), array(28), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(34), array([34, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1088, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1088), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 36.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 36), (1, 1, 10), (32, 36, 10)]
Inputs strides: [(0, 36, 1), (0, 0, 1), (360, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (26, 1, 32, 2048), (26, 32, 1, 2048), (26, 32, 2048), (26, 32, 1024), (27, 32, 36, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 36), (1, 2), (32, 36, 1024), (32, 2048, 36), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1152, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (11520, 360, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(26), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(26), array(26), array(26), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(36), array([36, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1152, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1152), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 25.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 25), (1, 1, 10), (32, 25, 10)]
Inputs strides: [(0, 25, 1), (0, 0, 1), (250, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (23, 1, 32, 2048), (23, 32, 1, 2048), (23, 32, 2048), (23, 32, 1024), (24, 32, 25, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 25), (1, 2), (32, 25, 1024), (32, 2048, 25), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (800, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (8000, 250, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(23), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(23), array(23), array(23), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(25), array([25, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 800, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(800), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 21.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 21), (1, 1, 10), (32, 21, 10)]
Inputs strides: [(0, 21, 1), (0, 0, 1), (210, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (20, 1, 32, 2048), (20, 32, 1, 2048), (20, 32, 2048), (20, 32, 1024), (21, 32, 21, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 21), (1, 2), (32, 21, 1024), (32, 2048, 21), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (672, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (6720, 210, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(20), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(20), array(20), array(20), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(21), array([21, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 672, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(672), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 21.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 21), (1, 1, 10), (32, 21, 10)]
Inputs strides: [(0, 21, 1), (0, 0, 1), (210, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (18, 1, 32, 2048), (18, 32, 1, 2048), (18, 32, 2048), (18, 32, 1024), (19, 32, 21, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 21), (1, 2), (32, 21, 1024), (32, 2048, 21), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (672, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (6720, 210, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(18), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(18), array(18), array(18), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(21), array([21, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 672, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(672), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 17.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 17), (1, 1, 10), (32, 17, 10)]
Inputs strides: [(0, 17, 1), (0, 0, 1), (170, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (15, 1, 32, 2048), (15, 32, 1, 2048), (15, 32, 2048), (15, 32, 1024), (16, 32, 17, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 17), (1, 2), (32, 17, 1024), (32, 2048, 17), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (544, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (5440, 170, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(15), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(15), array(15), array(15), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(17), array([17, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 544, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(544), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 16.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 16), (1, 1, 10), (32, 16, 10)]
Inputs strides: [(0, 16, 1), (0, 0, 1), (160, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (13, 1, 32, 2048), (13, 32, 1, 2048), (13, 32, 2048), (13, 32, 1024), (14, 32, 16, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 16), (1, 2), (32, 16, 1024), (32, 2048, 16), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (512, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (5120, 160, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(13), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(13), array(13), array(13), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(16), array([16, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 512, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(512), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 13.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 13), (1, 1, 10), (32, 13, 10)]
Inputs strides: [(0, 13, 1), (0, 0, 1), (130, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (11, 1, 32, 2048), (11, 32, 1, 2048), (11, 32, 2048), (11, 32, 1024), (12, 32, 13, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 13), (1, 2), (32, 13, 1024), (32, 2048, 13), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (416, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (4160, 130, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(11), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(11), array(11), array(11), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(13), array([13, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 416, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(416), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 9.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 9), (1, 1, 10), (32, 9, 10)]
Inputs strides: [(0, 9, 1), (0, 0, 1), (90, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (9, 1, 32, 2048), (9, 32, 1, 2048), (9, 32, 2048), (9, 32, 1024), (10, 32, 9, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 9), (1, 2), (32, 9, 1024), (32, 2048, 9), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (288, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (2880, 90, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(9), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(9), array(9), array(9), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(9), array([ 9, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 288, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(288), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 9.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 9), (1, 1, 10), (32, 9, 10)]
Inputs strides: [(0, 9, 1), (0, 0, 1), (90, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (8, 1, 32, 2048), (8, 32, 1, 2048), (8, 32, 2048), (8, 32, 1024), (9, 32, 9, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 9), (1, 2), (32, 9, 1024), (32, 2048, 9), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (288, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (2880, 90, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(8), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(8), array(8), array(8), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(9), array([ 9, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 288, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(288), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 26.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 26), (1, 1, 10), (32, 26, 10)]
Inputs strides: [(0, 26, 1), (0, 0, 1), (260, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (51, 1, 32, 2048), (51, 32, 1, 2048), (51, 32, 2048), (51, 32, 1024), (52, 32, 26, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 26), (1, 2), (32, 26, 1024), (32, 2048, 26), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (832, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (8320, 260, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(51), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(51), array(51), array(51), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(26), array([26, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 832, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(832), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 47.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 47), (1, 1, 10), (32, 47, 10)]
Inputs strides: [(0, 47, 1), (0, 0, 1), (470, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (50, 1, 32, 2048), (50, 32, 1, 2048), (50, 32, 2048), (50, 32, 1024), (51, 32, 47, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 47), (1, 2), (32, 47, 1024), (32, 2048, 47), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1504, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (15040, 470, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(50), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(50), array(50), array(50), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(47), array([47, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1504, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1504), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 42.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 42), (1, 1, 10), (32, 42, 10)]
Inputs strides: [(0, 42, 1), (0, 0, 1), (420, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (41, 1, 32, 2048), (41, 32, 1, 2048), (41, 32, 2048), (41, 32, 1024), (42, 32, 42, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 42), (1, 2), (32, 42, 1024), (32, 2048, 42), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1344, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (13440, 420, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(41), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(41), array(41), array(41), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(42), array([42, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1344, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1344), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 36.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 36), (1, 1, 10), (32, 36, 10)]
Inputs strides: [(0, 36, 1), (0, 0, 1), (360, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (36, 1, 32, 2048), (36, 32, 1, 2048), (36, 32, 2048), (36, 32, 1024), (37, 32, 36, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 36), (1, 2), (32, 36, 1024), (32, 2048, 36), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1152, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (11520, 360, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(36), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(36), array(36), array(36), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(36), array([36, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1152, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1152), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 32.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 32), (1, 1, 10), (32, 32, 10)]
Inputs strides: [(0, 32, 1), (0, 0, 1), (320, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (33, 1, 32, 2048), (33, 32, 1, 2048), (33, 32, 2048), (33, 32, 1024), (34, 32, 32, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 32), (1, 2), (32, 32, 1024), (32, 2048, 32), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1024, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (10240, 320, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(33), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(33), array(33), array(33), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(32), array([32, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1024, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1024), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 33.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 33), (1, 1, 10), (32, 33, 10)]
Inputs strides: [(0, 33, 1), (0, 0, 1), (330, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (30, 1, 32, 2048), (30, 32, 1, 2048), (30, 32, 2048), (30, 32, 1024), (31, 32, 33, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 33), (1, 2), (32, 33, 1024), (32, 2048, 33), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1056, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (10560, 330, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(30), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(30), array(30), array(30), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(33), array([33, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1056, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1056), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 30.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 30), (1, 1, 10), (32, 30, 10)]
Inputs strides: [(0, 30, 1), (0, 0, 1), (300, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (27, 1, 32, 2048), (27, 32, 1, 2048), (27, 32, 2048), (27, 32, 1024), (28, 32, 30, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 30), (1, 2), (32, 30, 1024), (32, 2048, 30), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (960, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (9600, 300, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(27), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(27), array(27), array(27), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(30), array([30, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 960, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(960), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 32.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 32), (1, 1, 10), (32, 32, 10)]
Inputs strides: [(0, 32, 1), (0, 0, 1), (320, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (24, 1, 32, 2048), (24, 32, 1, 2048), (24, 32, 2048), (24, 32, 1024), (25, 32, 32, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 32), (1, 2), (32, 32, 1024), (32, 2048, 32), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1024, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (10240, 320, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(24), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(24), array(24), array(24), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(32), array([32, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1024, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1024), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 26.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 26), (1, 1, 10), (32, 26, 10)]
Inputs strides: [(0, 26, 1), (0, 0, 1), (260, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (21, 1, 32, 2048), (21, 32, 1, 2048), (21, 32, 2048), (21, 32, 1024), (22, 32, 26, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 26), (1, 2), (32, 26, 1024), (32, 2048, 26), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (832, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (8320, 260, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(21), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(21), array(21), array(21), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(26), array([26, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 832, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(832), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 22.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 22), (1, 1, 10), (32, 22, 10)]
Inputs strides: [(0, 22, 1), (0, 0, 1), (220, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (20, 1, 32, 2048), (20, 32, 1, 2048), (20, 32, 2048), (20, 32, 1024), (21, 32, 22, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 22), (1, 2), (32, 22, 1024), (32, 2048, 22), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (704, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (7040, 220, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(20), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(20), array(20), array(20), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(22), array([22, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 704, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(704), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 18.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 18), (1, 1, 10), (32, 18, 10)]
Inputs strides: [(0, 18, 1), (0, 0, 1), (180, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (16, 1, 32, 2048), (16, 32, 1, 2048), (16, 32, 2048), (16, 32, 1024), (17, 32, 18, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 18), (1, 2), (32, 18, 1024), (32, 2048, 18), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (576, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (5760, 180, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(16), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(16), array(16), array(16), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(18), array([18, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 576, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(576), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 22.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 22), (1, 1, 10), (32, 22, 10)]
Inputs strides: [(0, 22, 1), (0, 0, 1), (220, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (14, 1, 32, 2048), (14, 32, 1, 2048), (14, 32, 2048), (14, 32, 1024), (15, 32, 22, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 22), (1, 2), (32, 22, 1024), (32, 2048, 22), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (704, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (7040, 220, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(14), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(14), array(14), array(14), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(22), array([22, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 704, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(704), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 14.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 14), (1, 1, 10), (32, 14, 10)]
Inputs strides: [(0, 14, 1), (0, 0, 1), (140, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (12, 1, 32, 2048), (12, 32, 1, 2048), (12, 32, 2048), (12, 32, 1024), (13, 32, 14, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 14), (1, 2), (32, 14, 1024), (32, 2048, 14), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (448, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (4480, 140, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(12), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(12), array(12), array(12), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(14), array([14, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 448, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(448), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 14.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 14), (1, 1, 10), (32, 14, 10)]
Inputs strides: [(0, 14, 1), (0, 0, 1), (140, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (10, 1, 32, 2048), (10, 32, 1, 2048), (10, 32, 2048), (10, 32, 1024), (11, 32, 14, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 14), (1, 2), (32, 14, 1024), (32, 2048, 14), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (448, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (4480, 140, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(10), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(10), array(10), array(10), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(14), array([14, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 448, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(448), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 12.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 12), (1, 1, 10), (32, 12, 10)]
Inputs strides: [(0, 12, 1), (0, 0, 1), (120, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (9, 1, 32, 2048), (9, 32, 1, 2048), (9, 32, 2048), (9, 32, 1024), (10, 32, 12, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 12), (1, 2), (32, 12, 1024), (32, 2048, 12), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (384, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (3840, 120, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(9), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(9), array(9), array(9), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(12), array([12, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 384, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(384), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 12.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 12), (1, 1, 10), (32, 12, 10)]
Inputs strides: [(0, 12, 1), (0, 0, 1), (120, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (7, 1, 32, 2048), (7, 32, 1, 2048), (7, 32, 2048), (7, 32, 1024), (8, 32, 12, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 12), (1, 2), (32, 12, 1024), (32, 2048, 12), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (384, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (3840, 120, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(7), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(7), array(7), array(7), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(12), array([12, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 384, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(384), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 9.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 9), (1, 1, 10), (32, 9, 10)]
Inputs strides: [(0, 9, 1), (0, 0, 1), (90, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (5, 1, 32, 2048), (5, 32, 1, 2048), (5, 32, 2048), (5, 32, 1024), (6, 32, 9, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 9), (1, 2), (32, 9, 1024), (32, 2048, 9), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (288, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (2880, 90, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(5), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(5), array(5), array(5), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(9), array([ 9, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 288, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(288), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 46.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 46), (1, 1, 10), (32, 46, 10)]
Inputs strides: [(0, 46, 1), (0, 0, 1), (460, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (51, 1, 32, 2048), (51, 32, 1, 2048), (51, 32, 2048), (51, 32, 1024), (52, 32, 46, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 46), (1, 2), (32, 46, 1024), (32, 2048, 46), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1472, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (14720, 460, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(51), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(51), array(51), array(51), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(46), array([46, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1472, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1472), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 41.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 41), (1, 1, 10), (32, 41, 10)]
Inputs strides: [(0, 41, 1), (0, 0, 1), (410, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (39, 1, 32, 2048), (39, 32, 1, 2048), (39, 32, 2048), (39, 32, 1024), (40, 32, 41, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 41), (1, 2), (32, 41, 1024), (32, 2048, 41), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1312, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (13120, 410, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(39), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(39), array(39), array(39), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(41), array([41, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1312, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1312), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 44.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 44), (1, 1, 10), (32, 44, 10)]
Inputs strides: [(0, 44, 1), (0, 0, 1), (440, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (36, 1, 32, 2048), (36, 32, 1, 2048), (36, 32, 2048), (36, 32, 1024), (37, 32, 44, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 44), (1, 2), (32, 44, 1024), (32, 2048, 44), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1408, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (14080, 440, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(36), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(36), array(36), array(36), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(44), array([44, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1408, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1408), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 36.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 36), (1, 1, 10), (32, 36, 10)]
Inputs strides: [(0, 36, 1), (0, 0, 1), (360, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (32, 1, 32, 2048), (32, 32, 1, 2048), (32, 32, 2048), (32, 32, 1024), (33, 32, 36, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 36), (1, 2), (32, 36, 1024), (32, 2048, 36), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1152, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (11520, 360, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(32), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(32), array(32), array(32), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(36), array([36, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1152, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1152), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 34.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 34), (1, 1, 10), (32, 34, 10)]
Inputs strides: [(0, 34, 1), (0, 0, 1), (340, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (29, 1, 32, 2048), (29, 32, 1, 2048), (29, 32, 2048), (29, 32, 1024), (30, 32, 34, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 34), (1, 2), (32, 34, 1024), (32, 2048, 34), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1088, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (10880, 340, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(29), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(29), array(29), array(29), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(34), array([34, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1088, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1088), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 38.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 38), (1, 1, 10), (32, 38, 10)]
Inputs strides: [(0, 38, 1), (0, 0, 1), (380, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (26, 1, 32, 2048), (26, 32, 1, 2048), (26, 32, 2048), (26, 32, 1024), (27, 32, 38, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 38), (1, 2), (32, 38, 1024), (32, 2048, 38), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1216, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (12160, 380, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(26), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(26), array(26), array(26), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(38), array([38, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1216, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1216), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 34.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 34), (1, 1, 10), (32, 34, 10)]
Inputs strides: [(0, 34, 1), (0, 0, 1), (340, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (24, 1, 32, 2048), (24, 32, 1, 2048), (24, 32, 2048), (24, 32, 1024), (25, 32, 34, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 34), (1, 2), (32, 34, 1024), (32, 2048, 34), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1088, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (10880, 340, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(24), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(24), array(24), array(24), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(34), array([34, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1088, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1088), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 27.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 27), (1, 1, 10), (32, 27, 10)]
Inputs strides: [(0, 27, 1), (0, 0, 1), (270, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (20, 1, 32, 2048), (20, 32, 1, 2048), (20, 32, 2048), (20, 32, 1024), (21, 32, 27, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 27), (1, 2), (32, 27, 1024), (32, 2048, 27), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (864, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (8640, 270, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(20), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(20), array(20), array(20), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(27), array([27, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 864, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(864), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 19.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 19), (1, 1, 10), (32, 19, 10)]
Inputs strides: [(0, 19, 1), (0, 0, 1), (190, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (18, 1, 32, 2048), (18, 32, 1, 2048), (18, 32, 2048), (18, 32, 1024), (19, 32, 19, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 19), (1, 2), (32, 19, 1024), (32, 2048, 19), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (608, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (6080, 190, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(18), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(18), array(18), array(18), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(19), array([19, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 608, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(608), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 18.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 18), (1, 1, 10), (32, 18, 10)]
Inputs strides: [(0, 18, 1), (0, 0, 1), (180, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (16, 1, 32, 2048), (16, 32, 1, 2048), (16, 32, 2048), (16, 32, 1024), (17, 32, 18, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 18), (1, 2), (32, 18, 1024), (32, 2048, 18), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (576, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (5760, 180, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(16), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(16), array(16), array(16), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(18), array([18, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 576, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(576), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 19.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 19), (1, 1, 10), (32, 19, 10)]
Inputs strides: [(0, 19, 1), (0, 0, 1), (190, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (14, 1, 32, 2048), (14, 32, 1, 2048), (14, 32, 2048), (14, 32, 1024), (15, 32, 19, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 19), (1, 2), (32, 19, 1024), (32, 2048, 19), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (608, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (6080, 190, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(14), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(14), array(14), array(14), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(19), array([19, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 608, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(608), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 15.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 15), (1, 1, 10), (32, 15, 10)]
Inputs strides: [(0, 15, 1), (0, 0, 1), (150, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (12, 1, 32, 2048), (12, 32, 1, 2048), (12, 32, 2048), (12, 32, 1024), (13, 32, 15, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 15), (1, 2), (32, 15, 1024), (32, 2048, 15), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (480, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (4800, 150, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(12), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(12), array(12), array(12), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(15), array([15, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 480, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(480), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 14.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 14), (1, 1, 10), (32, 14, 10)]
Inputs strides: [(0, 14, 1), (0, 0, 1), (140, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (10, 1, 32, 2048), (10, 32, 1, 2048), (10, 32, 2048), (10, 32, 1024), (11, 32, 14, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 14), (1, 2), (32, 14, 1024), (32, 2048, 14), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (448, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (4480, 140, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(10), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(10), array(10), array(10), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(14), array([14, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 448, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(448), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 11.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 11), (1, 1, 10), (32, 11, 10)]
Inputs strides: [(0, 11, 1), (0, 0, 1), (110, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (9, 1, 32, 2048), (9, 32, 1, 2048), (9, 32, 2048), (9, 32, 1024), (10, 32, 11, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 11), (1, 2), (32, 11, 1024), (32, 2048, 11), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (352, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (3520, 110, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(9), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(9), array(9), array(9), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(11), array([11, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 352, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(352), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 13.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 13), (1, 1, 10), (32, 13, 10)]
Inputs strides: [(0, 13, 1), (0, 0, 1), (130, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (8, 1, 32, 2048), (8, 32, 1, 2048), (8, 32, 2048), (8, 32, 1024), (9, 32, 13, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 13), (1, 2), (32, 13, 1024), (32, 2048, 13), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (416, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (4160, 130, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(8), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(8), array(8), array(8), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(13), array([13, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 416, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(416), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 28.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 28), (1, 1, 10), (32, 28, 10)]
Inputs strides: [(0, 28, 1), (0, 0, 1), (280, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (49, 1, 32, 2048), (49, 32, 1, 2048), (49, 32, 2048), (49, 32, 1024), (50, 32, 28, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 28), (1, 2), (32, 28, 1024), (32, 2048, 28), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (896, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (8960, 280, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(49), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(49), array(49), array(49), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(28), array([28, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 896, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(896), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 50.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 50), (1, 1, 10), (32, 50, 10)]
Inputs strides: [(0, 50, 1), (0, 0, 1), (500, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (46, 1, 32, 2048), (46, 32, 1, 2048), (46, 32, 2048), (46, 32, 1024), (47, 32, 50, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 50), (1, 2), (32, 50, 1024), (32, 2048, 50), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1600, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (16000, 500, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(46), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(46), array(46), array(46), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(50), array([50, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1600, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1600), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 45.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 45), (1, 1, 10), (32, 45, 10)]
Inputs strides: [(0, 45, 1), (0, 0, 1), (450, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (40, 1, 32, 2048), (40, 32, 1, 2048), (40, 32, 2048), (40, 32, 1024), (41, 32, 45, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 45), (1, 2), (32, 45, 1024), (32, 2048, 45), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1440, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (14400, 450, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(40), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(40), array(40), array(40), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(45), array([45, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1440, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1440), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 41.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 41), (1, 1, 10), (32, 41, 10)]
Inputs strides: [(0, 41, 1), (0, 0, 1), (410, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (36, 1, 32, 2048), (36, 32, 1, 2048), (36, 32, 2048), (36, 32, 1024), (37, 32, 41, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 41), (1, 2), (32, 41, 1024), (32, 2048, 41), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1312, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (13120, 410, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(36), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(36), array(36), array(36), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(41), array([41, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1312, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1312), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 38.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 38), (1, 1, 10), (32, 38, 10)]
Inputs strides: [(0, 38, 1), (0, 0, 1), (380, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (32, 1, 32, 2048), (32, 32, 1, 2048), (32, 32, 2048), (32, 32, 1024), (33, 32, 38, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 38), (1, 2), (32, 38, 1024), (32, 2048, 38), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1216, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (12160, 380, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(32), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(32), array(32), array(32), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(38), array([38, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1216, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1216), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 37.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 37), (1, 1, 10), (32, 37, 10)]
Inputs strides: [(0, 37, 1), (0, 0, 1), (370, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (29, 1, 32, 2048), (29, 32, 1, 2048), (29, 32, 2048), (29, 32, 1024), (30, 32, 37, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 37), (1, 2), (32, 37, 1024), (32, 2048, 37), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1184, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (11840, 370, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(29), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(29), array(29), array(29), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(37), array([37, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1184, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1184), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 30.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 30), (1, 1, 10), (32, 30, 10)]
Inputs strides: [(0, 30, 1), (0, 0, 1), (300, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (26, 1, 32, 2048), (26, 32, 1, 2048), (26, 32, 2048), (26, 32, 1024), (27, 32, 30, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 30), (1, 2), (32, 30, 1024), (32, 2048, 30), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (960, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (9600, 300, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(26), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(26), array(26), array(26), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(30), array([30, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 960, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(960), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 27.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 27), (1, 1, 10), (32, 27, 10)]
Inputs strides: [(0, 27, 1), (0, 0, 1), (270, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (23, 1, 32, 2048), (23, 32, 1, 2048), (23, 32, 2048), (23, 32, 1024), (24, 32, 27, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 27), (1, 2), (32, 27, 1024), (32, 2048, 27), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (864, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (8640, 270, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(23), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(23), array(23), array(23), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(27), array([27, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 864, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(864), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 26.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 26), (1, 1, 10), (32, 26, 10)]
Inputs strides: [(0, 26, 1), (0, 0, 1), (260, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (21, 1, 32, 2048), (21, 32, 1, 2048), (21, 32, 2048), (21, 32, 1024), (22, 32, 26, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 26), (1, 2), (32, 26, 1024), (32, 2048, 26), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (832, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (8320, 260, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(21), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(21), array(21), array(21), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(26), array([26, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 832, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(832), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 24.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 24), (1, 1, 10), (32, 24, 10)]
Inputs strides: [(0, 24, 1), (0, 0, 1), (240, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (18, 1, 32, 2048), (18, 32, 1, 2048), (18, 32, 2048), (18, 32, 1024), (19, 32, 24, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 24), (1, 2), (32, 24, 1024), (32, 2048, 24), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (768, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (7680, 240, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(18), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(18), array(18), array(18), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(24), array([24, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 768, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(768), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 18.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 18), (1, 1, 10), (32, 18, 10)]
Inputs strides: [(0, 18, 1), (0, 0, 1), (180, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (16, 1, 32, 2048), (16, 32, 1, 2048), (16, 32, 2048), (16, 32, 1024), (17, 32, 18, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 18), (1, 2), (32, 18, 1024), (32, 2048, 18), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (576, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (5760, 180, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(16), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(16), array(16), array(16), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(18), array([18, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 576, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(576), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 19.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 19), (1, 1, 10), (32, 19, 10)]
Inputs strides: [(0, 19, 1), (0, 0, 1), (190, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (14, 1, 32, 2048), (14, 32, 1, 2048), (14, 32, 2048), (14, 32, 1024), (15, 32, 19, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 19), (1, 2), (32, 19, 1024), (32, 2048, 19), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (608, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (6080, 190, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(14), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(14), array(14), array(14), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(19), array([19, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 608, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(608), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 14.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 14), (1, 1, 10), (32, 14, 10)]
Inputs strides: [(0, 14, 1), (0, 0, 1), (140, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (12, 1, 32, 2048), (12, 32, 1, 2048), (12, 32, 2048), (12, 32, 1024), (13, 32, 14, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 14), (1, 2), (32, 14, 1024), (32, 2048, 14), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (448, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (4480, 140, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(12), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(12), array(12), array(12), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(14), array([14, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 448, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(448), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 11.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 11), (1, 1, 10), (32, 11, 10)]
Inputs strides: [(0, 11, 1), (0, 0, 1), (110, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (10, 1, 32, 2048), (10, 32, 1, 2048), (10, 32, 2048), (10, 32, 1024), (11, 32, 11, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 11), (1, 2), (32, 11, 1024), (32, 2048, 11), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (352, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (3520, 110, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(10), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(10), array(10), array(10), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(11), array([11, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 352, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(352), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 2 (indices start at 0) has shape[1] == 10, but the output's size on that axis is 32.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 10), (1, 1, 10), (32, 10, 10)]
Inputs strides: [(0, 10, 1), (0, 0, 1), (100, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (8, 1, 32, 2048), (8, 32, 1, 2048), (8, 32, 2048), (8, 32, 1024), (9, 32, 10, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 10), (1, 2), (32, 10, 1024), (32, 2048, 10), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (320, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (3200, 100, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(8), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(8), array(8), array(8), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(10), array([10, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 320, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(320), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 8.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 8), (1, 1, 10), (32, 8, 10)]
Inputs strides: [(0, 8, 1), (0, 0, 1), (80, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (7, 1, 32, 2048), (7, 32, 1, 2048), (7, 32, 2048), (7, 32, 1024), (8, 32, 8, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 8), (1, 2), (32, 8, 1024), (32, 2048, 8), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (256, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (2560, 80, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(7), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(7), array(7), array(7), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(8), array([ 8, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 256, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(256), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 50.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 50), (1, 1, 10), (32, 50, 10)]
Inputs strides: [(0, 50, 1), (0, 0, 1), (500, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (51, 1, 32, 2048), (51, 32, 1, 2048), (51, 32, 2048), (51, 32, 1024), (52, 32, 50, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 50), (1, 2), (32, 50, 1024), (32, 2048, 50), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1600, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (16000, 500, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(51), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(51), array(51), array(51), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(50), array([50, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1600, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1600), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 47.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 47), (1, 1, 10), (32, 47, 10)]
Inputs strides: [(0, 47, 1), (0, 0, 1), (470, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (42, 1, 32, 2048), (42, 32, 1, 2048), (42, 32, 2048), (42, 32, 1024), (43, 32, 47, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 47), (1, 2), (32, 47, 1024), (32, 2048, 47), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1504, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (15040, 470, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(42), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(42), array(42), array(42), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(47), array([47, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1504, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1504), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 41.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 41), (1, 1, 10), (32, 41, 10)]
Inputs strides: [(0, 41, 1), (0, 0, 1), (410, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (36, 1, 32, 2048), (36, 32, 1, 2048), (36, 32, 2048), (36, 32, 1024), (37, 32, 41, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 41), (1, 2), (32, 41, 1024), (32, 2048, 41), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1312, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (13120, 410, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(36), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(36), array(36), array(36), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(41), array([41, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1312, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1312), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 39.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 39), (1, 1, 10), (32, 39, 10)]
Inputs strides: [(0, 39, 1), (0, 0, 1), (390, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (32, 1, 32, 2048), (32, 32, 1, 2048), (32, 32, 2048), (32, 32, 1024), (33, 32, 39, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 39), (1, 2), (32, 39, 1024), (32, 2048, 39), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1248, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (12480, 390, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(32), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(32), array(32), array(32), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(39), array([39, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1248, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1248), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 33.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 33), (1, 1, 10), (32, 33, 10)]
Inputs strides: [(0, 33, 1), (0, 0, 1), (330, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (29, 1, 32, 2048), (29, 32, 1, 2048), (29, 32, 2048), (29, 32, 1024), (30, 32, 33, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 33), (1, 2), (32, 33, 1024), (32, 2048, 33), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1056, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (10560, 330, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(29), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(29), array(29), array(29), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(33), array([33, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1056, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1056), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 35.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 35), (1, 1, 10), (32, 35, 10)]
Inputs strides: [(0, 35, 1), (0, 0, 1), (350, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (26, 1, 32, 2048), (26, 32, 1, 2048), (26, 32, 2048), (26, 32, 1024), (27, 32, 35, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 35), (1, 2), (32, 35, 1024), (32, 2048, 35), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1120, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (11200, 350, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(26), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(26), array(26), array(26), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(35), array([35, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1120, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1120), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 31.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 31), (1, 1, 10), (32, 31, 10)]
Inputs strides: [(0, 31, 1), (0, 0, 1), (310, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (23, 1, 32, 2048), (23, 32, 1, 2048), (23, 32, 2048), (23, 32, 1024), (24, 32, 31, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 31), (1, 2), (32, 31, 1024), (32, 2048, 31), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (992, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (9920, 310, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(23), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(23), array(23), array(23), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(31), array([31, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 992, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(992), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 26.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 26), (1, 1, 10), (32, 26, 10)]
Inputs strides: [(0, 26, 1), (0, 0, 1), (260, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (20, 1, 32, 2048), (20, 32, 1, 2048), (20, 32, 2048), (20, 32, 1024), (21, 32, 26, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 26), (1, 2), (32, 26, 1024), (32, 2048, 26), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (832, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (8320, 260, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(20), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(20), array(20), array(20), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(26), array([26, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 832, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(832), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 19.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 19), (1, 1, 10), (32, 19, 10)]
Inputs strides: [(0, 19, 1), (0, 0, 1), (190, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (19, 1, 32, 2048), (19, 32, 1, 2048), (19, 32, 2048), (19, 32, 1024), (20, 32, 19, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 19), (1, 2), (32, 19, 1024), (32, 2048, 19), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (608, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (6080, 190, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(19), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(19), array(19), array(19), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(19), array([19, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 608, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(608), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 18.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 18), (1, 1, 10), (32, 18, 10)]
Inputs strides: [(0, 18, 1), (0, 0, 1), (180, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (16, 1, 32, 2048), (16, 32, 1, 2048), (16, 32, 2048), (16, 32, 1024), (17, 32, 18, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 18), (1, 2), (32, 18, 1024), (32, 2048, 18), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (576, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (5760, 180, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(16), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(16), array(16), array(16), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(18), array([18, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 576, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(576), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 14.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 14), (1, 1, 10), (32, 14, 10)]
Inputs strides: [(0, 14, 1), (0, 0, 1), (140, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (14, 1, 32, 2048), (14, 32, 1, 2048), (14, 32, 2048), (14, 32, 1024), (15, 32, 14, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 14), (1, 2), (32, 14, 1024), (32, 2048, 14), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (448, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (4480, 140, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(14), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(14), array(14), array(14), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(14), array([14, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 448, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(448), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 15.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 15), (1, 1, 10), (32, 15, 10)]
Inputs strides: [(0, 15, 1), (0, 0, 1), (150, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (12, 1, 32, 2048), (12, 32, 1, 2048), (12, 32, 2048), (12, 32, 1024), (13, 32, 15, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 15), (1, 2), (32, 15, 1024), (32, 2048, 15), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (480, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (4800, 150, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(12), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(12), array(12), array(12), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(15), array([15, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 480, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(480), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 14.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 14), (1, 1, 10), (32, 14, 10)]
Inputs strides: [(0, 14, 1), (0, 0, 1), (140, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (10, 1, 32, 2048), (10, 32, 1, 2048), (10, 32, 2048), (10, 32, 1024), (11, 32, 14, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 14), (1, 2), (32, 14, 1024), (32, 2048, 14), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (448, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (4480, 140, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(10), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(10), array(10), array(10), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(14), array([14, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 448, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(448), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 12.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 12), (1, 1, 10), (32, 12, 10)]
Inputs strides: [(0, 12, 1), (0, 0, 1), (120, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (9, 1, 32, 2048), (9, 32, 1, 2048), (9, 32, 2048), (9, 32, 1024), (10, 32, 12, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 12), (1, 2), (32, 12, 1024), (32, 2048, 12), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (384, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (3840, 120, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(9), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(9), array(9), array(9), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(12), array([12, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 384, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(384), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 11.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 11), (1, 1, 10), (32, 11, 10)]
Inputs strides: [(0, 11, 1), (0, 0, 1), (110, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (8, 1, 32, 2048), (8, 32, 1, 2048), (8, 32, 2048), (8, 32, 1024), (9, 32, 11, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 11), (1, 2), (32, 11, 1024), (32, 2048, 11), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (352, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (3520, 110, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(8), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(8), array(8), array(8), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(11), array([11, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 352, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(352), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 41.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 41), (1, 1, 10), (32, 41, 10)]
Inputs strides: [(0, 41, 1), (0, 0, 1), (410, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (51, 1, 32, 2048), (51, 32, 1, 2048), (51, 32, 2048), (51, 32, 1024), (52, 32, 41, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 41), (1, 2), (32, 41, 1024), (32, 2048, 41), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1312, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (13120, 410, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(51), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(51), array(51), array(51), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(41), array([41, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1312, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1312), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 51.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 51), (1, 1, 10), (32, 51, 10)]
Inputs strides: [(0, 51, 1), (0, 0, 1), (510, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (51, 1, 32, 2048), (51, 32, 1, 2048), (51, 32, 2048), (51, 32, 1024), (52, 32, 51, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 51), (1, 2), (32, 51, 1024), (32, 2048, 51), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1632, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (16320, 510, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(51), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(51), array(51), array(51), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(51), array([51, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1632, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1632), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 41.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 41), (1, 1, 10), (32, 41, 10)]
Inputs strides: [(0, 41, 1), (0, 0, 1), (410, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (40, 1, 32, 2048), (40, 32, 1, 2048), (40, 32, 2048), (40, 32, 1024), (41, 32, 41, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 41), (1, 2), (32, 41, 1024), (32, 2048, 41), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1312, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (13120, 410, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(40), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(40), array(40), array(40), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(41), array([41, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1312, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1312), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 36.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 36), (1, 1, 10), (32, 36, 10)]
Inputs strides: [(0, 36, 1), (0, 0, 1), (360, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (36, 1, 32, 2048), (36, 32, 1, 2048), (36, 32, 2048), (36, 32, 1024), (37, 32, 36, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 36), (1, 2), (32, 36, 1024), (32, 2048, 36), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1152, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (11520, 360, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(36), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(36), array(36), array(36), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(36), array([36, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1152, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1152), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 40.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 40), (1, 1, 10), (32, 40, 10)]
Inputs strides: [(0, 40, 1), (0, 0, 1), (400, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (33, 1, 32, 2048), (33, 32, 1, 2048), (33, 32, 2048), (33, 32, 1024), (34, 32, 40, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 40), (1, 2), (32, 40, 1024), (32, 2048, 40), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1280, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (12800, 400, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(33), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(33), array(33), array(33), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(40), array([40, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1280, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1280), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 33.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 33), (1, 1, 10), (32, 33, 10)]
Inputs strides: [(0, 33, 1), (0, 0, 1), (330, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (29, 1, 32, 2048), (29, 32, 1, 2048), (29, 32, 2048), (29, 32, 1024), (30, 32, 33, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 33), (1, 2), (32, 33, 1024), (32, 2048, 33), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1056, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (10560, 330, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(29), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(29), array(29), array(29), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(33), array([33, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1056, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1056), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 30.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 30), (1, 1, 10), (32, 30, 10)]
Inputs strides: [(0, 30, 1), (0, 0, 1), (300, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (27, 1, 32, 2048), (27, 32, 1, 2048), (27, 32, 2048), (27, 32, 1024), (28, 32, 30, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 30), (1, 2), (32, 30, 1024), (32, 2048, 30), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (960, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (9600, 300, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(27), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(27), array(27), array(27), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(30), array([30, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 960, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(960), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 30.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 30), (1, 1, 10), (32, 30, 10)]
Inputs strides: [(0, 30, 1), (0, 0, 1), (300, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (24, 1, 32, 2048), (24, 32, 1, 2048), (24, 32, 2048), (24, 32, 1024), (25, 32, 30, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 30), (1, 2), (32, 30, 1024), (32, 2048, 30), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (960, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (9600, 300, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(24), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(24), array(24), array(24), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(30), array([30, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 960, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(960), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 24.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 24), (1, 1, 10), (32, 24, 10)]
Inputs strides: [(0, 24, 1), (0, 0, 1), (240, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (20, 1, 32, 2048), (20, 32, 1, 2048), (20, 32, 2048), (20, 32, 1024), (21, 32, 24, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 24), (1, 2), (32, 24, 1024), (32, 2048, 24), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (768, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (7680, 240, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(20), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(20), array(20), array(20), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(24), array([24, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 768, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(768), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 22.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 22), (1, 1, 10), (32, 22, 10)]
Inputs strides: [(0, 22, 1), (0, 0, 1), (220, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (18, 1, 32, 2048), (18, 32, 1, 2048), (18, 32, 2048), (18, 32, 1024), (19, 32, 22, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 22), (1, 2), (32, 22, 1024), (32, 2048, 22), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (704, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (7040, 220, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(18), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(18), array(18), array(18), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(22), array([22, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 704, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(704), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 19.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 19), (1, 1, 10), (32, 19, 10)]
Inputs strides: [(0, 19, 1), (0, 0, 1), (190, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (15, 1, 32, 2048), (15, 32, 1, 2048), (15, 32, 2048), (15, 32, 1024), (16, 32, 19, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 19), (1, 2), (32, 19, 1024), (32, 2048, 19), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (608, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (6080, 190, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(15), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(15), array(15), array(15), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(19), array([19, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 608, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(608), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 14.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 14), (1, 1, 10), (32, 14, 10)]
Inputs strides: [(0, 14, 1), (0, 0, 1), (140, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (13, 1, 32, 2048), (13, 32, 1, 2048), (13, 32, 2048), (13, 32, 1024), (14, 32, 14, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 14), (1, 2), (32, 14, 1024), (32, 2048, 14), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (448, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (4480, 140, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(13), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(13), array(13), array(13), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(14), array([14, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 448, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(448), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 14.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 14), (1, 1, 10), (32, 14, 10)]
Inputs strides: [(0, 14, 1), (0, 0, 1), (140, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (12, 1, 32, 2048), (12, 32, 1, 2048), (12, 32, 2048), (12, 32, 1024), (13, 32, 14, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 14), (1, 2), (32, 14, 1024), (32, 2048, 14), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (448, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (4480, 140, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(12), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(12), array(12), array(12), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(14), array([14, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 448, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(448), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 12.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 12), (1, 1, 10), (32, 12, 10)]
Inputs strides: [(0, 12, 1), (0, 0, 1), (120, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (10, 1, 32, 2048), (10, 32, 1, 2048), (10, 32, 2048), (10, 32, 1024), (11, 32, 12, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 12), (1, 2), (32, 12, 1024), (32, 2048, 12), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (384, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (3840, 120, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(10), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(10), array(10), array(10), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(12), array([12, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 384, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(384), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 2 (indices start at 0) has shape[1] == 10, but the output's size on that axis is 32.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 10), (1, 1, 10), (32, 10, 10)]
Inputs strides: [(0, 10, 1), (0, 0, 1), (100, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (9, 1, 32, 2048), (9, 32, 1, 2048), (9, 32, 2048), (9, 32, 1024), (10, 32, 10, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 10), (1, 2), (32, 10, 1024), (32, 2048, 10), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (320, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (3200, 100, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(9), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(9), array(9), array(9), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(10), array([10, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 320, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(320), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 2 (indices start at 0) has shape[1] == 10, but the output's size on that axis is 32.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 10), (1, 1, 10), (32, 10, 10)]
Inputs strides: [(0, 10, 1), (0, 0, 1), (100, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (7, 1, 32, 2048), (7, 32, 1, 2048), (7, 32, 2048), (7, 32, 1024), (8, 32, 10, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 10), (1, 2), (32, 10, 1024), (32, 2048, 10), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (320, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (3200, 100, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(7), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(7), array(7), array(7), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(10), array([10, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 320, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(320), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 45.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 45), (1, 1, 10), (32, 45, 10)]
Inputs strides: [(0, 45, 1), (0, 0, 1), (450, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (51, 1, 32, 2048), (51, 32, 1, 2048), (51, 32, 2048), (51, 32, 1024), (52, 32, 45, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 45), (1, 2), (32, 45, 1024), (32, 2048, 45), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1440, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (14400, 450, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(51), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(51), array(51), array(51), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(45), array([45, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1440, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1440), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 45.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 45), (1, 1, 10), (32, 45, 10)]
Inputs strides: [(0, 45, 1), (0, 0, 1), (450, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (44, 1, 32, 2048), (44, 32, 1, 2048), (44, 32, 2048), (44, 32, 1024), (45, 32, 45, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 45), (1, 2), (32, 45, 1024), (32, 2048, 45), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1440, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (14400, 450, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(44), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(44), array(44), array(44), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(45), array([45, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1440, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1440), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 45.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 45), (1, 1, 10), (32, 45, 10)]
Inputs strides: [(0, 45, 1), (0, 0, 1), (450, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (39, 1, 32, 2048), (39, 32, 1, 2048), (39, 32, 2048), (39, 32, 1024), (40, 32, 45, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 45), (1, 2), (32, 45, 1024), (32, 2048, 45), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1440, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (14400, 450, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(39), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(39), array(39), array(39), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(45), array([45, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1440, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1440), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 35.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 35), (1, 1, 10), (32, 35, 10)]
Inputs strides: [(0, 35, 1), (0, 0, 1), (350, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (33, 1, 32, 2048), (33, 32, 1, 2048), (33, 32, 2048), (33, 32, 1024), (34, 32, 35, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 35), (1, 2), (32, 35, 1024), (32, 2048, 35), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1120, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (11200, 350, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(33), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(33), array(33), array(33), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(35), array([35, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1120, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1120), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 33.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 33), (1, 1, 10), (32, 33, 10)]
Inputs strides: [(0, 33, 1), (0, 0, 1), (330, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (29, 1, 32, 2048), (29, 32, 1, 2048), (29, 32, 2048), (29, 32, 1024), (30, 32, 33, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 33), (1, 2), (32, 33, 1024), (32, 2048, 33), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1056, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (10560, 330, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(29), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(29), array(29), array(29), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(33), array([33, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1056, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1056), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 32.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 32), (1, 1, 10), (32, 32, 10)]
Inputs strides: [(0, 32, 1), (0, 0, 1), (320, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (27, 1, 32, 2048), (27, 32, 1, 2048), (27, 32, 2048), (27, 32, 1024), (28, 32, 32, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 32), (1, 2), (32, 32, 1024), (32, 2048, 32), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1024, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (10240, 320, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(27), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(27), array(27), array(27), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(32), array([32, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1024, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1024), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 27.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 27), (1, 1, 10), (32, 27, 10)]
Inputs strides: [(0, 27, 1), (0, 0, 1), (270, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (24, 1, 32, 2048), (24, 32, 1, 2048), (24, 32, 2048), (24, 32, 1024), (25, 32, 27, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 27), (1, 2), (32, 27, 1024), (32, 2048, 27), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (864, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (8640, 270, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(24), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(24), array(24), array(24), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(27), array([27, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 864, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(864), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 25.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 25), (1, 1, 10), (32, 25, 10)]
Inputs strides: [(0, 25, 1), (0, 0, 1), (250, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (21, 1, 32, 2048), (21, 32, 1, 2048), (21, 32, 2048), (21, 32, 1024), (22, 32, 25, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 25), (1, 2), (32, 25, 1024), (32, 2048, 25), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (800, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (8000, 250, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(21), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(21), array(21), array(21), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(25), array([25, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 800, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(800), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 22.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 22), (1, 1, 10), (32, 22, 10)]
Inputs strides: [(0, 22, 1), (0, 0, 1), (220, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (18, 1, 32, 2048), (18, 32, 1, 2048), (18, 32, 2048), (18, 32, 1024), (19, 32, 22, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 22), (1, 2), (32, 22, 1024), (32, 2048, 22), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (704, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (7040, 220, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(18), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(18), array(18), array(18), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(22), array([22, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 704, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(704), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 17.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 17), (1, 1, 10), (32, 17, 10)]
Inputs strides: [(0, 17, 1), (0, 0, 1), (170, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (15, 1, 32, 2048), (15, 32, 1, 2048), (15, 32, 2048), (15, 32, 1024), (16, 32, 17, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 17), (1, 2), (32, 17, 1024), (32, 2048, 17), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (544, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (5440, 170, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(15), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(15), array(15), array(15), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(17), array([17, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 544, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(544), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 15.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 15), (1, 1, 10), (32, 15, 10)]
Inputs strides: [(0, 15, 1), (0, 0, 1), (150, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (13, 1, 32, 2048), (13, 32, 1, 2048), (13, 32, 2048), (13, 32, 1024), (14, 32, 15, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 15), (1, 2), (32, 15, 1024), (32, 2048, 15), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (480, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (4800, 150, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(13), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(13), array(13), array(13), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(15), array([15, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 480, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(480), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 17.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 17), (1, 1, 10), (32, 17, 10)]
Inputs strides: [(0, 17, 1), (0, 0, 1), (170, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (12, 1, 32, 2048), (12, 32, 1, 2048), (12, 32, 2048), (12, 32, 1024), (13, 32, 17, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 17), (1, 2), (32, 17, 1024), (32, 2048, 17), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (544, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (5440, 170, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(12), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(12), array(12), array(12), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(17), array([17, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 544, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(544), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 12.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 12), (1, 1, 10), (32, 12, 10)]
Inputs strides: [(0, 12, 1), (0, 0, 1), (120, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (11, 1, 32, 2048), (11, 32, 1, 2048), (11, 32, 2048), (11, 32, 1024), (12, 32, 12, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 12), (1, 2), (32, 12, 1024), (32, 2048, 12), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (384, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (3840, 120, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(11), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(11), array(11), array(11), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(12), array([12, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 384, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(384), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 12.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 12), (1, 1, 10), (32, 12, 10)]
Inputs strides: [(0, 12, 1), (0, 0, 1), (120, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (9, 1, 32, 2048), (9, 32, 1, 2048), (9, 32, 2048), (9, 32, 1024), (10, 32, 12, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 12), (1, 2), (32, 12, 1024), (32, 2048, 12), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (384, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (3840, 120, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(9), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(9), array(9), array(9), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(12), array([12, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 384, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(384), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 9.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 9), (1, 1, 10), (32, 9, 10)]
Inputs strides: [(0, 9, 1), (0, 0, 1), (90, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (8, 1, 32, 2048), (8, 32, 1, 2048), (8, 32, 2048), (8, 32, 1024), (9, 32, 9, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 9), (1, 2), (32, 9, 1024), (32, 2048, 9), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (288, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (2880, 90, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(8), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(8), array(8), array(8), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(9), array([ 9, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 288, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(288), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 42.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 42), (1, 1, 10), (32, 42, 10)]
Inputs strides: [(0, 42, 1), (0, 0, 1), (420, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (51, 1, 32, 2048), (51, 32, 1, 2048), (51, 32, 2048), (51, 32, 1024), (52, 32, 42, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 42), (1, 2), (32, 42, 1024), (32, 2048, 42), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1344, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (13440, 420, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(51), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(51), array(51), array(51), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(42), array([42, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1344, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1344), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 45.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 45), (1, 1, 10), (32, 45, 10)]
Inputs strides: [(0, 45, 1), (0, 0, 1), (450, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (46, 1, 32, 2048), (46, 32, 1, 2048), (46, 32, 2048), (46, 32, 1024), (47, 32, 45, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 45), (1, 2), (32, 45, 1024), (32, 2048, 45), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1440, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (14400, 450, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(46), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(46), array(46), array(46), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(45), array([45, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1440, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1440), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 45.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 45), (1, 1, 10), (32, 45, 10)]
Inputs strides: [(0, 45, 1), (0, 0, 1), (450, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (39, 1, 32, 2048), (39, 32, 1, 2048), (39, 32, 2048), (39, 32, 1024), (40, 32, 45, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 45), (1, 2), (32, 45, 1024), (32, 2048, 45), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1440, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (14400, 450, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(39), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(39), array(39), array(39), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(45), array([45, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1440, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1440), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 35.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 35), (1, 1, 10), (32, 35, 10)]
Inputs strides: [(0, 35, 1), (0, 0, 1), (350, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (35, 1, 32, 2048), (35, 32, 1, 2048), (35, 32, 2048), (35, 32, 1024), (36, 32, 35, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 35), (1, 2), (32, 35, 1024), (32, 2048, 35), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1120, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (11200, 350, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(35), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(35), array(35), array(35), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(35), array([35, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1120, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1120), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 32.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 32), (1, 1, 10), (32, 32, 10)]
Inputs strides: [(0, 32, 1), (0, 0, 1), (320, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (30, 1, 32, 2048), (30, 32, 1, 2048), (30, 32, 2048), (30, 32, 1024), (31, 32, 32, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 32), (1, 2), (32, 32, 1024), (32, 2048, 32), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1024, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (10240, 320, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(30), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(30), array(30), array(30), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(32), array([32, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1024, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1024), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 33.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 33), (1, 1, 10), (32, 33, 10)]
Inputs strides: [(0, 33, 1), (0, 0, 1), (330, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (27, 1, 32, 2048), (27, 32, 1, 2048), (27, 32, 2048), (27, 32, 1024), (28, 32, 33, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 33), (1, 2), (32, 33, 1024), (32, 2048, 33), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1056, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (10560, 330, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(27), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(27), array(27), array(27), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(33), array([33, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1056, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1056), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 28.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 28), (1, 1, 10), (32, 28, 10)]
Inputs strides: [(0, 28, 1), (0, 0, 1), (280, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (24, 1, 32, 2048), (24, 32, 1, 2048), (24, 32, 2048), (24, 32, 1024), (25, 32, 28, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 28), (1, 2), (32, 28, 1024), (32, 2048, 28), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (896, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (8960, 280, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(24), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(24), array(24), array(24), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(28), array([28, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 896, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(896), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 25.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 25), (1, 1, 10), (32, 25, 10)]
Inputs strides: [(0, 25, 1), (0, 0, 1), (250, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (21, 1, 32, 2048), (21, 32, 1, 2048), (21, 32, 2048), (21, 32, 1024), (22, 32, 25, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 25), (1, 2), (32, 25, 1024), (32, 2048, 25), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (800, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (8000, 250, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(21), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(21), array(21), array(21), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(25), array([25, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 800, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(800), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 21.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 21), (1, 1, 10), (32, 21, 10)]
Inputs strides: [(0, 21, 1), (0, 0, 1), (210, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (19, 1, 32, 2048), (19, 32, 1, 2048), (19, 32, 2048), (19, 32, 1024), (20, 32, 21, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 21), (1, 2), (32, 21, 1024), (32, 2048, 21), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (672, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (6720, 210, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(19), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(19), array(19), array(19), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(21), array([21, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 672, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(672), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 19.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 19), (1, 1, 10), (32, 19, 10)]
Inputs strides: [(0, 19, 1), (0, 0, 1), (190, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (17, 1, 32, 2048), (17, 32, 1, 2048), (17, 32, 2048), (17, 32, 1024), (18, 32, 19, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 19), (1, 2), (32, 19, 1024), (32, 2048, 19), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (608, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (6080, 190, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(17), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(17), array(17), array(17), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(19), array([19, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 608, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(608), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 18.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 18), (1, 1, 10), (32, 18, 10)]
Inputs strides: [(0, 18, 1), (0, 0, 1), (180, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (15, 1, 32, 2048), (15, 32, 1, 2048), (15, 32, 2048), (15, 32, 1024), (16, 32, 18, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 18), (1, 2), (32, 18, 1024), (32, 2048, 18), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (576, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (5760, 180, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(15), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(15), array(15), array(15), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(18), array([18, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 576, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(576), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 16.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 16), (1, 1, 10), (32, 16, 10)]
Inputs strides: [(0, 16, 1), (0, 0, 1), (160, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (13, 1, 32, 2048), (13, 32, 1, 2048), (13, 32, 2048), (13, 32, 1024), (14, 32, 16, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 16), (1, 2), (32, 16, 1024), (32, 2048, 16), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (512, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (5120, 160, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(13), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(13), array(13), array(13), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(16), array([16, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 512, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(512), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 13.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 13), (1, 1, 10), (32, 13, 10)]
Inputs strides: [(0, 13, 1), (0, 0, 1), (130, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (11, 1, 32, 2048), (11, 32, 1, 2048), (11, 32, 2048), (11, 32, 1024), (12, 32, 13, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 13), (1, 2), (32, 13, 1024), (32, 2048, 13), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (416, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (4160, 130, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(11), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(11), array(11), array(11), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(13), array([13, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 416, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(416), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 11.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 11), (1, 1, 10), (32, 11, 10)]
Inputs strides: [(0, 11, 1), (0, 0, 1), (110, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (10, 1, 32, 2048), (10, 32, 1, 2048), (10, 32, 2048), (10, 32, 1024), (11, 32, 11, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 11), (1, 2), (32, 11, 1024), (32, 2048, 11), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (352, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (3520, 110, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(10), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(10), array(10), array(10), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(11), array([11, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 352, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(352), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 2 (indices start at 0) has shape[1] == 10, but the output's size on that axis is 32.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 10), (1, 1, 10), (32, 10, 10)]
Inputs strides: [(0, 10, 1), (0, 0, 1), (100, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (9, 1, 32, 2048), (9, 32, 1, 2048), (9, 32, 2048), (9, 32, 1024), (10, 32, 10, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 10), (1, 2), (32, 10, 1024), (32, 2048, 10), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (320, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (3200, 100, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(9), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(9), array(9), array(9), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(10), array([10, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 320, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(320), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 7.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 7), (1, 1, 10), (32, 7, 10)]
Inputs strides: [(0, 7, 1), (0, 0, 1), (70, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (6, 1, 32, 2048), (6, 32, 1, 2048), (6, 32, 2048), (6, 32, 1024), (7, 32, 7, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 7), (1, 2), (32, 7, 1024), (32, 2048, 7), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (224, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (2240, 70, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(6), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(6), array(6), array(6), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(7), array([ 7, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([ 224, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(224), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 45.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 45), (1, 1, 10), (32, 45, 10)]
Inputs strides: [(0, 45, 1), (0, 0, 1), (450, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (51, 1, 32, 2048), (51, 32, 1, 2048), (51, 32, 2048), (51, 32, 1024), (52, 32, 45, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 45), (1, 2), (32, 45, 1024), (32, 2048, 45), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1440, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (14400, 450, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(51), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(51), array(51), array(51), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(45), array([45, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1440, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1440), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 44.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 44), (1, 1, 10), (32, 44, 10)]
Inputs strides: [(0, 44, 1), (0, 0, 1), (440, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (41, 1, 32, 2048), (41, 32, 1, 2048), (41, 32, 2048), (41, 32, 1024), (42, 32, 44, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 44), (1, 2), (32, 44, 1024), (32, 2048, 44), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1408, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (14080, 440, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(41), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(41), array(41), array(41), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(44), array([44, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1408, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1408), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 42.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 42), (1, 1, 10), (32, 42, 10)]
Inputs strides: [(0, 42, 1), (0, 0, 1), (420, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (36, 1, 32, 2048), (36, 32, 1, 2048), (36, 32, 2048), (36, 32, 1024), (37, 32, 42, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 42), (1, 2), (32, 42, 1024), (32, 2048, 42), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1344, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (13440, 420, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(36), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(36), array(36), array(36), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(42), array([42, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1344, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1344), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
[31mGpuElemwise. Input dimension mis-match. Input 1 (indices start at 0) has shape[2] == 10, but the output's size on that axis is 37.
Apply node that caused the error: GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}(GpuDimShuffle{1,0,2}.0, <CudaNdarrayType(float32, (True, True, False))>, init_atten[t-1][cuda])
Toposort index: 68
Inputs types: [CudaNdarrayType(float32, (True, False, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, 3D)]
Inputs shapes: [(1, 32, 37), (1, 1, 10), (32, 37, 10)]
Inputs strides: [(0, 37, 1), (0, 0, 1), (370, 10, 1)]
Inputs values: ['not shown', 'not shown', 'not shown']
Outputs clients: [[GpuReshape{2}(GpuElemwise{Composite{(i0 + (i1 * i2))},no_inplace}.0, MakeVector{dtype='int64'}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.
Apply node that caused the error: forall_inplace,gpu,scan_fn}(Elemwise{sub,no_inplace}.0, GpuDimShuffle{0,x,1,2}.0, GpuDimShuffle{0,1,x,2}.0, GpuSubtensor{int64:int64:int64}.0, GpuSubtensor{int64:int64:int64}.0, GpuIncSubtensor{InplaceSet;:int64:}.0, Elemwise{sub,no_inplace}.0, Elemwise{maximum,no_inplace}.0, Elemwise{sub,no_inplace}.0, gru_map_Ux, gru_map_U, map_ff_W, GpuDimShuffle{1,0}.0, GpuDimShuffle{x,0}.0, GpuDimShuffle{1,0,2}.0, GpuDimShuffle{1,2,0}.0, GpuDimShuffle{x}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, GpuDimShuffle{x,x,0}.0, Elemwise{add,no_inplace}.0, Elemwise{sub,no_inplace}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, Shape_i{1}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, MakeVector{dtype='int64'}.0, GpuReshape{2}.0, ScalarFromTensor.0, ScalarFromTensor.0, GpuReshape{2}.0, GpuReshape{2}.0, GpuReshape{2}.0, Elemwise{Composite{Switch(EQ(i0, i1), i2, i0)}}.0, Elemwise{switch,no_inplace}.0, ScalarFromTensor.0)
Toposort index: 2126
Inputs types: [TensorType(int64, scalar), CudaNdarrayType(float32, (False, True, False, False)), CudaNdarrayType(float32, (False, False, True, False)), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 4D), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, scalar), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, row), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, 3D), CudaNdarrayType(float32, (True,)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), CudaNdarrayType(float32, (True, True, False)), TensorType(int64, scalar), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, scalar), TensorType(int64, vector), TensorType(int64, vector), TensorType(int64, vector), CudaNdarrayType(float32, matrix), Scalar(int64), Scalar(int64), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), CudaNdarrayType(float32, matrix), TensorType(int64, scalar), TensorType(int64, scalar), Scalar(int64)]
Inputs shapes: [(), (33, 1, 32, 2048), (33, 32, 1, 2048), (33, 32, 2048), (33, 32, 1024), (34, 32, 37, 10), (), (), (), (10, 10), (10, 20), (4096, 2), (32, 37), (1, 2), (32, 37, 1024), (32, 2048, 37), (1,), (1, 1, 10), (1, 1, 10), (1, 1, 20), (), (), (3,), (1,), (), (1,), (1,), (2,), (1184, 2048), (), (), (2048, 2048), (6144, 10), (6144, 20), (), (), ()]
Inputs strides: [(), (65536, 0, 2048, 1), (65536, 2048, 0, 1), (65536, 2048, 1), (32768, 1024, 1), (11840, 370, 10, 1), (), (), (), (10, 1), (20, 1), (2, 1), (1, 32), (0, 1), (1024, 32768, 1), (2048, 1, 65536), (0,), (0, 0, 1), (0, 0, 1), (0, 0, 1), (), (), (8,), (8,), (), (8,), (8,), (8,), (2048, 1), (), (), (2048, 1), (10, 1), (20, 1), (), (), ()]
Inputs values: [array(33), 'not shown', 'not shown', 'not shown', 'not shown', 'not shown', array(33), array(33), array(33), 'not shown', 'not shown', 'not shown', 'not shown', CudaNdarray([[ 0.  0.]]), 'not shown', 'not shown', CudaNdarray([ 1.]), 'not shown', 'not shown', 'not shown', array(2048), array(37), array([37, 32, 10]), array([2048]), array(10), array([10]), array([20]), array([1184, 2048]), 'not shown', 10, 20, 'not shown', 'not shown', 'not shown', array(1184), array(2048), 2048]
Outputs clients: [[GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.0, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuReshape{1}(forall_inplace,gpu,scan_fn}.1, TensorConstant{(1,) of -1}), Shape_i{1}(forall_inplace,gpu,scan_fn}.1), Shape_i{2}(forall_inplace,gpu,scan_fn}.1), GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.1, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuSubtensor{int64:int64:int64}(forall_inplace,gpu,scan_fn}.2, ScalarFromTensor.0, ScalarFromTensor.0, Constant{-1})], [GpuElemwise{sub,no_inplace}(CudaNdarrayConstant{[[ 1.]]}, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{(((log(i0) * i1) + (log(i2) * i3)) * i4)}}[(0, 0)](GpuElemwise{sub,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0), GpuElemwise{Composite{(i0 + (i1 * i2) + (i3 * i4))},no_inplace}(CudaNdarrayConstant{[[  1.00000001e-07]]}, GpuElemwise{mul,no_inplace}.0, GpuElemwise{sub,no_inplace}.0, GpuElemwise{mul,no_inplace}.0, forall_inplace,gpu,scan_fn}.3), GpuElemwise{Composite{((i0 * i1 * i2 * i3) / i4)}}[(0, 1)](CudaNdarrayConstant{[[-1.]]}, GpuElemwise{Composite{(i0 - ((i0 - i1) * i2))},no_inplace}.0, forall_inplace,gpu,scan_fn}.3, GpuFromHost.0, GpuElemwise{mul,no_inplace}.0)]]

HINT: Re-running with most Theano optimization disabled could give you a back-trace of when this node was created. This can be done with by setting the Theano flag 'optimizer=fast_compile'. If that does not work, Theano optimizations can be disabled with 'optimizer=None'.
HINT: Use the Theano flag 'exception_verbosity=high' for a debugprint and storage map footprint of this apply node.[0m
